<!DOCTYPE html>
<html lang="zh-CN">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= pageTitle %>
  </title>
  <style>
    :root {
      --primary-color: #3498db;
      --primary-dark: #2980b9;
      --secondary-color: #2ecc71;
      --error-color: #e74c3c;
      --text-color: #2c3e50;
      --light-gray: #ecf0f1;
      --dark-gray: #7f8c8d;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      background: linear-gradient(135deg, #74b9ff, #0984e3);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      color: var(--text-color);
    }

    .system-info {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255, 255, 255, 0.9);
      padding: 10px 20px;
      border-radius: 8px;
      font-size: 0.9rem;
      color: var(--dark-gray);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .login-container {
      background: white;
      padding: 2.5rem;
      border-radius: 12px;
      width: 100%;
      max-width: 400px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      animation: slideUp 0.5s ease;
    }

    .login-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .login-header h1 {
      color: var(--text-color);
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }

    .login-header p {
      color: var(--dark-gray);
      font-size: 0.95rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
      position: relative;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      color: var(--text-color);
      font-weight: 500;
    }

    .form-group input {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid var(--light-gray);
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      color: var(--text-color);
    }

    .form-group input:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .error-message {
      color: var(--error-color);
      font-size: 0.85rem;
      margin-top: 0.3rem;
      display: none;
    }

    .remember-forgot {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .remember-me {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .remember-me input[type="checkbox"] {
      accent-color: var(--primary-color);
    }

    .forgot-password {
      color: var(--primary-color);
      text-decoration: none;
      font-size: 0.9rem;
    }

    .forgot-password:hover {
      text-decoration: underline;
    }

    .login-button {
      width: 100%;
      padding: 12px;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .login-button:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
    }

    .login-button:active {
      transform: translateY(0);
    }

    .register-link {
      text-align: center;
      margin-top: 1.5rem;
    }

    .register-link a {
      color: var(--primary-color);
      text-decoration: none;
    }

    .register-link a:hover {
      text-decoration: underline;
    }

    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .loading {
      display: none;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to {
        transform: translate(-50%, -50%) rotate(360deg);
      }
    }

    @media (max-width: 480px) {
      .login-container {
        margin: 1rem;
        padding: 1.5rem;
      }

      .system-info {
        position: static;
        margin: 1rem;
        text-align: center;
      }
    }
  </style>
</head>

<body>
  <div class="system-info">
    <div>当前用户: <%= typeof user !=='undefined' ? user : 'Turnip1202' %>
    </div>
    <div>系统时间: <%= typeof currentTime !=='undefined' ? currentTime : new Date().toISOString().replace('T', ' '
        ).slice(0, 19) %>
    </div>
  </div>

  <div class="login-container">
    <div class="login-header">
      <h1>欢迎登录</h1>
      <p>请输入您的账号信息</p>
    </div>

    <form id="loginForm">
      <div class="form-group">
        <label for="username">用户名</label>
        <input type="text" id="username" name="username" required autocomplete="username" placeholder="请输入用户名">
        <div class="error-message" id="username-error"></div>
      </div>

      <div class="form-group">
        <label for="password">密码</label>
        <input type="password" id="password" name="password" required autocomplete="current-password"
          placeholder="请输入密码">
        <div class="error-message" id="password-error"></div>
      </div>

      <div class="remember-forgot">
        <div class="remember-me">
          <input type="checkbox" id="remember" name="remember">
          <label for="remember">记住我</label>
        </div>
        <a href="/forgot-password" class="forgot-password">忘记密码？</a>
      </div>

      <button type="submit" class="login-button" id="loginButton">
        登录
        <span class="loading" id="loginLoading"></span>
      </button>
    </form>

    <div class="register-link">
      还没有账号？ <a href="/register">立即注册</a>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const loginForm = document.getElementById('loginForm');
      const loginButton = document.getElementById('loginButton');
      const loginLoading = document.getElementById('loginLoading');

      // 检查是否有保存的用户名
      const data = localStorage.getItem('userInfo');
      if (data) {
        try {
          const userInfo = JSON.parse(data);
          document.getElementById('username').value = userInfo.userName;
          document.getElementById('password').value = userInfo.password;
          document.getElementById('remember').checked = true;
        }
        catch (e) {
          const isInvalidity = confirm('缓存信息有误，点击确定清除缓存');
          if (isInvalidity) localStorage.clear();
          else {

          }
        }

      }

      // 处理表单提交
      loginForm.addEventListener('submit', async function (event) {
        event.preventDefault();

        // 重置错误提示
        document.querySelectorAll('.error-message').forEach(el => {
          el.textContent = '';
          el.style.display = 'none';
        });

        // 获取表单数据
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        const remember = document.getElementById('remember').checked;

        // 表单验证
        if (!username) {
          showError('username', '请输入用户名');
          return;
        }

        if (!password) {
          showError('password', '请输入密码');
          return;
        }

        try {
          // 显示加载状态
          loginButton.disabled = true;
          loginButton.textContent = '';
          loginLoading.style.display = 'block';

          // 发送登录请求
          const response = await fetch('/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              username,
              password,
              remember
            })
          });

          const res = await response.json();

          if (res.success) {
            const data = res.data;

            // 登录成功
            if (remember) {
              localStorage.setItem('userInfo', JSON.stringify(data));
            } else {
              localStorage.removeItem('userInfo');
            }
            console.log('Login success:', res.data);
            const params = `${data.userName}&${data.password}`;
            // 跳转到首页或指定页面
            window.location.href = '/generate/' + params;
          } else {
            // 显示错误信息
            showError('username', res.message || '用户名或密码错误');
          }
        } catch (error) {
          showError('username', '登录失败，请稍后重试');
          console.error('Login error:', error);
        } finally {
          // 恢复按钮状态
          loginButton.disabled = false;
          loginButton.textContent = '登录';
          loginLoading.style.display = 'none';
        }
      });

      // 显示错误信息的函数
      function showError(field, message) {
        const errorElement = document.getElementById(`${field}-error`);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }
    });
  </script>
</body>

</html>