<!DOCTYPE html>
<html lang="zh-CN">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>文件生成管理系统</title>
  <!-- 引入 Vue 3 -->
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
  <!-- 引入 Element Plus -->
  <link rel="stylesheet" href="https://unpkg.com/element-plus/dist/index.css">
  <script src="https://unpkg.com/element-plus"></script>
  <!-- 引入图标 -->
  <link rel="stylesheet" href="https://unpkg.com/@element-plus/icons-vue@2.3.1/dist/index.css">
  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .form-container {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid #eee;
      border-radius: 8px;
    }

    .file-list {
      margin-top: 20px;
    }

    .operation-container {
      margin-top: 20px;
      display: flex;
      gap: 10px;
    }

    .mb-10 {
      margin-bottom: 10px;
    }

    .header-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .user-info {
      font-size: 14px;
      color: #666;
    }
  </style>
</head>

<body>
  <div id="app" class="container">
    <el-header>
      <div class="header-info">
        <h2>文件生成管理系统</h2>
        <div class="user-info">
          <p>当前用户: <%= typeof user !=='undefined' ? user : '访客' %>
          </p>
          <p>当前时间: <%= typeof currentTime !=='undefined' ? currentTime : new Date().toISOString().replace('T', ' '
              ).slice(0, 19) %>
          </p>
        </div>
      </div>
    </el-header>
    <el-container>
      <el-main>
        <div class="form-container">
          <el-form :model="fileForm" label-width="120px">
            <el-form-item label="文件名">
              <el-input v-model="fileForm.fileName" placeholder="请输入文件名（不需要扩展名）"></el-input>
            </el-form-item>

            <el-form-item label="文件类型">
              <el-select v-model="fileForm.fileType" placeholder="请选择文件类型">
                <el-option label="Markdown" value="md"></el-option>
                <el-option label="Text" value="txt"></el-option>
              </el-select>
            </el-form-item>

            <el-form-item label="保存路径">
              <el-input v-model="fileForm.savePath" placeholder="请输入保存路径"></el-input>
            </el-form-item>

            <el-form-item label="标题">
              <el-input v-model="fileForm.title" placeholder="请输入文章标题"></el-input>
            </el-form-item>

            <el-form-item label="描述">
              <el-input type="textarea" v-model="fileForm.description" placeholder="请输入文章描述"></el-input>
            </el-form-item>

            <el-form-item label="标签">
              <el-select v-model="fileForm.tags" multiple placeholder="请选择标签">
                <el-option v-for="tag in availableTags" :key="tag" :label="tag" :value="tag">
                </el-option>
              </el-select>
            </el-form-item>

            <el-form-item label="分类">
              <el-select v-model="fileForm.category" placeholder="请选择分类">
                <el-option v-for="category in availableCategories" :key="category" :label="category" :value="category">
                </el-option>
              </el-select>
            </el-form-item>

            <el-form-item label="是否为草稿">
              <el-switch v-model="fileForm.draft"></el-switch>
            </el-form-item>

            <el-form-item label="文件内容">
              <el-input type="textarea" :rows="10" v-model="fileForm.template" placeholder="请输入文件内容">
              </el-input>
            </el-form-item>

            <el-form-item>
              <el-button type="primary" @click="generateFile">生成文件</el-button>
              <el-button @click="resetForm">重置</el-button>
            </el-form-item>
          </el-form>
        </div>

        <div class="file-list">
          <el-card>
            <template #header>
              <div class="card-header">
                <span>文件列表</span>
                <el-button style="float: right;" @click="refreshFiles">刷新列表</el-button>
              </div>
            </template>
            <el-table :data="fileList" style="width: 100%">
              <el-table-column prop="name" label="文件名" width="180"></el-table-column>
              <el-table-column prop="path" label="路径"></el-table-column>
              <el-table-column prop="created" label="创建时间" width="180">
                <template #default="scope">
                  {{ formatDate(scope.row.created) }}
                </template>
              </el-table-column>
              <el-table-column fixed="right" label="操作" width="120">
                <template #default="scope">
                  <el-button type="danger" @click="deleteFile(scope.row)" size="small">
                    删除
                  </el-button>
                </template>
              </el-table-column>
            </el-table>
          </el-card>
        </div>
      </el-main>
    </el-container>
  </div>

  <script>
    const { createApp, ref, onMounted } = Vue
    const { ElMessage } = ElementPlus

    const app = createApp({
      setup() {
        const fileForm = ref({
          fileName: '',
          fileType: 'md',
          savePath: 'D:/blog/posts',
          title: '',
          description: '',
          tags: [],
          category: '',
          draft: false,
          template: ''
        })

        const availableTags = ref([])
        const availableCategories = ref([])
        const fileList = ref([])


        // 获取配置信息
        const fetchConfig = async () => {
          try {
            const response = await fetch('/config')
            const data = await response.json()
            availableTags.value = data.tags
            availableCategories.value = data.categories
          } catch (error) {
            ElMessage.error('获取配置信息失败')
          }
        }

        // 获取文件列表
        const fetchFiles = async () => {
          try {
            const response = await fetch(`/files?directory=${fileForm.value.savePath}`)
            const data = await response.json()
            if (data.success) {
              fileList.value = data.files
            } else {
              ElMessage.warning(data.message)
            }
          } catch (error) {
            ElMessage.error('获取文件列表失败')
          }
        }

        // 生成文件
        const generateFile = async () => {
          try {
            const response = await fetch('/generate', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(fileForm.value)
            })
            const data = await response.json()
            if (data.success) {
              ElMessage.success('文件生成成功')
              fetchFiles()
            } else {
              ElMessage.error(data.message)
            }
          } catch (error) {
            ElMessage.error('文件生成失败')
          }
        }

        // 删除文件
        const deleteFile = async (file) => {
          try {
            const response = await fetch('/file', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ filePath: file.path })
            })
            const data = await response.json()
            if (data.success) {
              ElMessage.success('文件删除成功')
              fetchFiles()
            } else {
              ElMessage.error(data.message)
            }
          } catch (error) {
            ElMessage.error('文件删除失败')
          }
        }

        // 重置表单
        const resetForm = () => {
          fileForm.value = {
            fileName: '',
            fileType: 'md',
            savePath: 'D:/blog/posts',
            title: '',
            description: '',
            tags: [],
            category: '',
            draft: false,
            template: ''
          }
        }

        // 刷新文件列表
        const refreshFiles = () => {
          fetchFiles()
        }

        // 格式化日期
        const formatDate = (date) => {
          return new Date(date).toLocaleString()
        }
        // 页面加载时检查会话
        onMounted(() => {

          fetchConfig()
          fetchFiles()
        })


        return {
          fileForm,
          availableTags,
          availableCategories,
          fileList,
          generateFile,
          deleteFile,
          resetForm,
          refreshFiles,
          formatDate
        }
      }
    })

    app.use(ElementPlus)
    app.mount('#app')
  </script>
</body>

</html>